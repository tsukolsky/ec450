/*******************************************************************************\
| main.c
| Author: Todd Sukolsky
| ID: U50387016
| Initial Build: 3/18/2013
| Last Revised: 3/18/2013
| Copyright of Todd Sukolsky
|================================================================================
| Description: This program is the main program for homework 4 of BU's ECE450.
|  	The assignment require four tones to be played over a small speaker, that a button
|	can manipulate (turn on, off, raise tone) of the notes, and one advanced feature.
|	THe advanced feature, on initial build, is still TBD. See later "Revisions" and
|	"Notes" for what was actually implemented.
|--------------------------------------------------------------------------------
| Revisions: 3/18- Initial Build. Original setup is just to have it play C tone
|				   to mess around with. Next revision will have it do different things.
|
|================================================================================
| *NOTES: Tone Frequencies: C=261.63, D=293.66, E=329.63, F=349.23, G=392.00, A=440
|							B=493.88...That C is the middle C
\*******************************************************************************/

#include "msp430g2553.h"

//Define Button, Pin, LEDs
#define RED_LED (1 << 0) 		//0x01
#define GREEN_LED (1 << 6)		//0x40
#define BUTTON_BIT (1 << 3) 		//0x08
#define TA0_BIT (1 << 1)		//0x02 => Bit mask corresponding to TA0

//Define Tone Half Frequencies
#define C_tone 261
#define D_tone 293
#define E_tone 330
#define F_tone 350
#define G_tone 392
#define A_tone 440
#define B_tone 494

//Define Oscillator frequency
#define FOSC 1000000

//Define bools
#define fTrue	 1
#define fFalse	 0

/*==============================================*/
/*				Global Variables				*/
/*==============================================*/
volatile unsigned int halfPeriod=500;	//1kHz tone.
volatile unsigned int playingSound=0;	//Whether we are playing a sound at the moment
volatile unsigned int flagPlaySong=fFalse;

/*==============================================*/
/*			Forward Function Declarations		*/
/*==============================================*/
void initTimerA();
void initButtonAndLEDS();

/*==============================================*/
/*				   Main Program					*/
/*==============================================*/

void main(void){
	WDTCTL = WDTPW + WDTHOLD;	//shut down watchdog timer
	BCSCTL1 = CALBC1_1MHZ;		//1MHz calibration for clock
	DCOCTL = CALDCO_1MHZ;		//"

	//Initialize timers and buttons
	initButtonAndLEDS();
	initTimerA();

	//Enable global interrupts
	_bis_SR_register(GIE);

	//Main Program Loop
	while(fTrue){
		if (flagPlaySong){playSong();flagPlaySong=fFalse;}	//Play song then reset flag.
	}

	return 0;
}


/*==============================================*/
/*				Functions						*/
/*==============================================*/

void initTimerA(){
	TA0CTL |= TACLR; 	//reset clock
	TA0CTL = TASSEL1+ID_0+MC_1;					//clock source is SMCLK, clk divider =1, up mode
	TA0CCTL0 = CCIE + playingSound;				//turn on output compare interrupt, initially OUTMOD
	TA0CCR0 = FOSC/C_tone-1;					//when output is triggered. TO make C_tone, eq => 261Hz= 1MHz/(x) ==> x=1MHz/(2*C_tone)
	
	//Connect Timer output to pin TA0
	P1SEL |= TA0_BIT;
	P1DIR |= TA0_BIT;
}

/*------------------------------------------*/

void playSong(){
	volatile static unsigned int state=0, lastTone=0;
	volatile static unsigned int whichRun=0, repetitions=0, repeatedToneReps=0;
	//State machine
	switch (state){
	//Initialization state
	case 0:{
		TACCTL0 = CCIE + OUTMOD_4;		//turn sound on, move to state 1
		repetitions=0;
		repeatedToneReps=0;
		whichRun=0;
		break;
	}
	//Triple tone to play, beginning
	case 1: {
		if (repeatedToneReps++ < 3){
			if (repetitions < STATE_0_TIME){
				TA0CCR0=FOSC/G_tone-1;
				state=0;
			} else {lastTone=state; state=6;}	//Go to pause.
		} else {lastTone=state; state=6;repeatedToneReps=0; repetitions=0;}
		break;
	}
	//G-G-G-"C"-F-D-"C"-F-D
	case 2: {
		if (repetitions < STATE_2_TIME){
			TACCR0=FOSC/C_tone-1;
		} else {lastTone=state; state=6;}		//Go to pause
		break;
	}
	case 3:{
		if (repetitions < STATE_3_TIME){
			TACCR0=FOSC/F_tone-1;
		} else {lastTone=state; state=6;}
		break;
	}
	case 4:{
		if (repetitions < STATE_4_TIME){
			TACCR0=FOSC/D_tone-1;
		} else {lastTone=state; state=6;}
		break;
	}
	case 5:{
		//Get out of this sucker.
		TACCTL0=CCIE;	//no more sound.
		state=0;
		whichRun=0;
		break;
	}
	case 6:{
		//Pause for a certain number of ms
		if (repetitions++ < PAUSE_TIME){
			//Don't output sound.
			TACCTL0 = CCIE;
		} else {
			if (lastTone < 5 && repeatedToneReps==0){
				if (repeatedToneReps==0 && whichRun++>0){
					state=lastTone+1;		//should move to state 2
				}else if(repeatedToneReps==0 && whichRun++==0){
					state=2;				//repeat the C-F-D phrase
				}else{state=lastTone;}		//should go back to state 1
				repetitions=0;
				TACCTL0 = CCIE+OUTMOD_4;	//turn sound back on
			}else {state=0;}
	}
	default:{state=0; whichRun=0;break;}
	}//end switch
}
/*------------------------------------------*/

void initButtonAndLEDS(){
    //Initialize LEDs port
    P1DIR |= (RED_LED + GREEN_LED);
    P1OUT |= GREEN_LED;					//set green high initially
    P1OUT &= ~RED_LED;					//set red low initially

    //Initialize Button
    P1OUT |= BUTTON_BIT;			//Declare a pull up
    P1REN |= BUTTON_BIT;			//Enable PUll up
    P1IES |= BUTTON_BIT;			//set to trigger on falling edge
    P1IFG &= ~BUTTON_BIT;			//Make sure flag is cleared initially
    P1IE |= BUTTON_BIT;				//Enable interrupt for button
}

/*==========================================*/
/*				  ISR's						*/
/*==========================================*/

void interrupt buttonISR(){

	if (P1IFG&BUTTON_BIT){
		P1IFG &= ~BUTTON_BIT;	//lower flag
		flagPlaySong=fTrue;
		P1OUT ^= RED_LED;
	} else; //do nothing, not correct occasion

}//end buttonISR handler.

/*------------------------------------------*/

//Timer compare match. Just toggle LEDS.
void interrupt timerAISR(){
	P1OUT ^= GREEN_LED;

	//UPdate control register
	TACCTL0 = CCIE + playingSound;				//update control register on whether it should be playing a sound.
}

//Declare interrupt vectors.
ISR_VECTOR(buttonISR,".int02")
ISR_VECTOR(timerAISR,".int09")
